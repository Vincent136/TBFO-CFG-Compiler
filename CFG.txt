Terminals:
+ - * / % and or variable number is ! not = > < ( ) true false string ' " if elif else : print input str float int double while for in range def class import as from return raise len range , break pass continue with open
Variables:
START ALL VARIABLE VALUE BOOL OPS STRING IF ELIF ELSE PRINT EXPRES RELATION INPUT BRACKET TYPE WHILE FOR RANGE DEF CLASS IMPORT FROM RETURN RAISE WITH RANGE BREAK PASS CONTINUE COMMENT COMBODY NEBRACKET PRIMBOOL FUSION STRINGB LIST
Productions:
START -> START START | VARIABLE = ALL | VARIABLE + = ALL | VARIABLE - = ALL | VARIABLE * = ALL | VARIABLE / = ALL | IF | PRINT | WHILE | FOR | DEF | CLASS | IMPORT | FROM | COMMENT; 
ALL ->  VARIABLE | VALUE | INPUT | ALL , ALL | WITH | LIST;

VARIABLE -> variable;

LIST -> [ ALL ];

VALUE -> number | ( ALL ) | BOOL | STRING;
VALUE -> ALL OPS ALL | ALL ANOTHEROPS ALL;

PRIMBOOL -> true | false;
BOOL -> PRIMBOOL | BOOL and BOOL | BOOL or BOOL | not BOOL | ALL is ALL | ALL RELATION ALL;

RELATION -> > | < | = = | ! = | < = | > =;
OPS -> + | - | * | / | %;
ANOTHEROPS -> / / | * *;

STRING -> " STRINGB " | ' STRINGB ' | STRING + STRING;
STRINGB -> string | STRINGB STRINGB;

COMMENT -> " " " COMBODY " " " | ' ' ' COMBODY ' ' ';
COMBODY -> ALL | COMBODY COMBODY;

NEBRACKET -> ( ALL );
BRACKET -> NEBRACKET | ( );

PRINT -> print BRACKET;

BACK -> : START;
EXPRES -> ( BOOL ) BACK | BOOL BACK;

IF -> if EXPRES;
IF -> IF ELIF;
IF -> IF ELSE;
IF -> IF FUSION;

ELIF -> elif EXPRES;
ELIF -> ELIF ELIF;
ELIF -> ELIF ELSE;
ELIF -> ELIF FUSION;

ELSE -> else BACK;

FUSION -> BREAK | RAISE | PASS | CONTINUE;
RAISE -> raise BRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;

TYPE -> str | float | int | double;
INPUT -> input BRACKET | TYPE ( INPUT );

RANGE -> range BRACKET;
WHILE -> while EXPRES;

FOR -> for VARIABLE in STRING BACK | for VARIABLE in RANGE BACK | for VARIABLE in LIST BACK;

DEF -> def VARIABLE BRACKET BACK | DEF RETURN;
RETURN -> return BOOL | return ALL;

CLASS -> class VARIABLE BACK;

IMPORT -> import VARIABLE as VARIABLE | import VARIABLE;
FROM -> from VARIABLE IMPORT;

WITH -> with open BRACKET as VARIABLE