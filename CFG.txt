Terminals:
string variable number = $ + - / * ( ) " ' > < ! , : [ ] # print import as from True False and or not is if elif else while class def return for in range with open input str int float double break pass continue raise
Variables:
START NEWLINE ASSCLAUSE VARIABLE VARVAL PRINT IMPORT FROM STRING CSTRING BODY BOOL IF ELIF ELSE IFBODY WHILE CLASS DEF RETURN OPS FOR LIST RANGE WITH INPUT TYPE BREAK PASS CONTINUE STATEMENT LOOPBODY RAISE LINECOM COMMENT COMBODY
Productions:
START -> START NEWLINE | START NEWLINE START | ASSCLAUSE | PRINT | IMPORT | FROM | COMMENT | IF | WHILE | CLASS | DEF | FOR | WITH | RAISE | LINECOM; 
NEWLINE -> $;
LINECOM -> # CSTRING;
COMMENT -> " " " COMBODY " " " | ' ' ' COMBODY ' ' ';
COMBODY -> CSTRING | COMBODY NEWLINE COMBODY | COMBODY NEWLINE;
ASSCLAUSE -> VARIABLE = VARVAL | VARIABLE / = VARVAL | VARIABLE * = VARVAL | VARIABLE + = VARVAL | VARIABLE - = VARVAL;
VARIABLE -> variable;
VARVAL -> VARIABLE | number | STRING | BOOL | VARVAL OPS VARVAL | VARVAL , VARVAL | ( VARVAL ) | INPUT;
BOOL -> True | False | BOOL and BOOL | BOOL or BOOL | not BOOL | VARVAL is VARVAL | VARVAL RELOPS VARVAL;
RELOPS -> > = | < = | ! = | = = | > | <;
OPS -> + | - | / | * | % | ^ | < < | > >;
STRING -> " CSTRING " | ' CSTRING ' | STRING + STRING;
CSTRING -> string | CSTRING CSTRING;
PRINT -> print ( VARVAL );
IMPORT -> import VARIABLE | import VARIABLE as VARIABLE;
FROM -> from VARIABLE IMPORT | from VARIABLE import *;                                                                    
BODY -> VARIABLE | BODY BODY;
IFBODY -> IFBODY NEWLINE | IFBODY NEWLINE IFBODY | ASSCLAUSE | PRINT | IMPORT | FROM | COMMENT | IF | ELIF | ELSE | WHILE | DEF | FOR | WITH | STATEMENT | RAISE | LINECOM;
IF -> if BOOL : NEWLINE IFBODY | if ( BOOL ) : NEWLINE IFBODY;
ELIF -> elif BOOL : NEWLINE IFBODY | elif ( BOOL ) : NEWLINE IFBODY;
ELSE -> else : NEWLINE START;
LOOPBODY -> LOOPBODY NEWLINE LOOPBODY | ASSCLAUSE | PRINT | IMPORT | FROM | COMMENT | IF | WHILE | CLASS | DEF | FOR | WITH | STATEMENT | RAISE | LINECOM;
WHILE -> while BOOL : NEWLINE LOOPBODY | while ( BOOL ) : NEWLINE LOOPBODY;
CLASS -> class VARIABLE : NEWLINE START;
DEF -> def VARIABLE ( VARVAL ) : NEWLINE START | DEF RETURN;
RETURN -> return VARVAL | return;
FOR -> for VARIABLE in STRING : NEWLINE LOOPBODY | for VARIABLE in LIST : NEWLINE LOOPBODY | for VARIABLE in RANGE : NEWLINE LOOPBODY;
LIST -> [ VARVAL ];
RANGE -> range ( VARVAL );
WITH -> with open ( VARVAL ) as VARIABLE : NEWLINE START;
TYPE -> str | int | float | double;
INPUT -> input ( ) | input ( VARVAL ) | TYPE ( INPUT );
STATEMENT -> BREAK | PASS | CONTINUE;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
RAISE -> raise VARIABLE ( VARVAL )
